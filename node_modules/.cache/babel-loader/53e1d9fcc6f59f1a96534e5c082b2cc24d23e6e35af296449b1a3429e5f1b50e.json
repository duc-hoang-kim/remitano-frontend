{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport useFetch from \"../../../hooks/useFetch\";\nconst useLoadVideos = _ref => {\n  _s();\n  let {\n    pageIndex\n  } = _ref;\n  const path = 'api/v1/videos';\n  const {\n    data,\n    isLoading,\n    error,\n    total,\n    fetchApi\n  } = useFetch({\n    path: path,\n    method: 'GET'\n  });\n  const parsedData = data == null ? [] : data.map(raw_video => ({\n    id: raw_video.id,\n    youtubeUrl: raw_video.youtube_url,\n    youtubeId: raw_video.youtube_id,\n    sharedBy: raw_video.sharer_email,\n    upvoteCount: raw_video.upvote_count,\n    downvoteCount: raw_video.downvote_count,\n    description: raw_video.description,\n    title: raw_video.title,\n    createdAt: raw_video.created_at,\n    updatedAt: raw_video.updated_at\n  }));\n  useEffect(() => {\n    fetchApi({\n      page: pageIndex\n    });\n  }, [pageIndex]);\n  return {\n    data: parsedData,\n    isLoading,\n    error,\n    total,\n    fetchVideos: fetchApi\n  };\n};\n_s(useLoadVideos, \"lhU658fifyBZwS2EFDDoP8t1U10=\", false, function () {\n  return [useFetch];\n});\nexport default useLoadVideos;","map":{"version":3,"names":["useEffect","useFetch","useLoadVideos","_ref","_s","pageIndex","path","data","isLoading","error","total","fetchApi","method","parsedData","map","raw_video","id","youtubeUrl","youtube_url","youtubeId","youtube_id","sharedBy","sharer_email","upvoteCount","upvote_count","downvoteCount","downvote_count","description","title","createdAt","created_at","updatedAt","updated_at","page","fetchVideos"],"sources":["/Users/hoangkimduc/remitano/remitano-backend/remitano-frontend/src/features/videos/hooks/useLoadVideos.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport useFetch from \"../../../hooks/useFetch\";\nimport { VideoType } from \"../types\";\n\ntype useLoadVideosProps = {\n  pageIndex: number;\n}\n\nconst useLoadVideos = ({ pageIndex }: useLoadVideosProps) => {\n  const path = 'api/v1/videos'\n  const { data, isLoading, error, total, fetchApi } = useFetch({ path: path, method: 'GET'})\n\n  const parsedData: VideoType[] = data == null ? [] : (data as any[]).map(raw_video =>\n    ({\n      id: raw_video.id,\n      youtubeUrl: raw_video.youtube_url,\n      youtubeId: raw_video.youtube_id,\n      sharedBy: raw_video.sharer_email,\n      upvoteCount: raw_video.upvote_count,\n      downvoteCount: raw_video.downvote_count,\n      description: raw_video.description,\n      title: raw_video.title,\n      createdAt: raw_video.created_at,\n      updatedAt: raw_video.updated_at\n    }) as VideoType\n  )\n\n    useEffect(()=>{\n      fetchApi({ page: pageIndex })\n    }, [pageIndex])\n\n  return { data: parsedData, isLoading, error, total, fetchVideos: fetchApi }\n}\n\nexport default useLoadVideos\n"],"mappings":";AAAA,SAASA,SAAS,QAAkB,OAAO;AAC3C,OAAOC,QAAQ,MAAM,yBAAyB;AAO9C,MAAMC,aAAa,GAAGC,IAAA,IAAuC;EAAAC,EAAA;EAAA,IAAtC;IAAEC;EAA8B,CAAC,GAAAF,IAAA;EACtD,MAAMG,IAAI,GAAG,eAAe;EAC5B,MAAM;IAAEC,IAAI;IAAEC,SAAS;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGV,QAAQ,CAAC;IAAEK,IAAI,EAAEA,IAAI;IAAEM,MAAM,EAAE;EAAK,CAAC,CAAC;EAE1F,MAAMC,UAAuB,GAAGN,IAAI,IAAI,IAAI,GAAG,EAAE,GAAIA,IAAI,CAAWO,GAAG,CAACC,SAAS,KAC9E;IACCC,EAAE,EAAED,SAAS,CAACC,EAAE;IAChBC,UAAU,EAAEF,SAAS,CAACG,WAAW;IACjCC,SAAS,EAAEJ,SAAS,CAACK,UAAU;IAC/BC,QAAQ,EAAEN,SAAS,CAACO,YAAY;IAChCC,WAAW,EAAER,SAAS,CAACS,YAAY;IACnCC,aAAa,EAAEV,SAAS,CAACW,cAAc;IACvCC,WAAW,EAAEZ,SAAS,CAACY,WAAW;IAClCC,KAAK,EAAEb,SAAS,CAACa,KAAK;IACtBC,SAAS,EAAEd,SAAS,CAACe,UAAU;IAC/BC,SAAS,EAAEhB,SAAS,CAACiB;EACvB,CAAC,CAAc,CAChB;EAEChC,SAAS,CAAC,MAAI;IACZW,QAAQ,CAAC;MAAEsB,IAAI,EAAE5B;IAAU,CAAC,CAAC;EAC/B,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEjB,OAAO;IAAEE,IAAI,EAAEM,UAAU;IAAEL,SAAS;IAAEC,KAAK;IAAEC,KAAK;IAAEwB,WAAW,EAAEvB;EAAS,CAAC;AAC7E,CAAC;AAAAP,EAAA,CAxBKF,aAAa;EAAA,QAEmCD,QAAQ;AAAA;AAwB9D,eAAeC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}