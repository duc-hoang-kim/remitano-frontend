{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nconst useFetch = _ref => {\n  _s();\n  let {\n    path,\n    method,\n    onSuccess\n  } = _ref;\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [total, setTotal] = useState(0);\n  const fetchApi = useCallback(function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const url = `${process.env.REACT_APP_REMITANO_BACKEND_URL}/${path}?` + (method === \"GET\" ? new URLSearchParams(params) : \"\");\n    const common_params = {\n      method: method,\n      mode: \"cors\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const fetch_params = method === \"GET\" ? common_params : {\n      ...common_params,\n      body: JSON.stringify(params)\n    };\n    fetch(url, fetch_params).then(res => {\n      setTotal(parseInt(res.headers.get(\"Total\") || \"0\"));\n      if (res.ok) {\n        res.json().then(resBody => {\n          onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(resBody);\n          setError(resBody.error);\n          setData(resBody.data);\n          setIsLoading(false);\n        });\n      } else {\n        res.json().then(resBody => {\n          setError(resBody.error);\n          setData(resBody.data);\n          setIsLoading(false);\n        });\n      }\n    });\n  }, [path]);\n  return {\n    data,\n    isLoading,\n    error,\n    total,\n    fetchApi\n  };\n};\n_s(useFetch, \"sgsctnAYahUYksIYiguu81ue/TM=\");\nexport default useFetch;","map":{"version":3,"names":["useCallback","useState","useFetch","_ref","_s","path","method","onSuccess","data","setData","isLoading","setIsLoading","error","setError","total","setTotal","fetchApi","params","arguments","length","undefined","url","process","env","REACT_APP_REMITANO_BACKEND_URL","URLSearchParams","common_params","mode","credentials","headers","fetch_params","body","JSON","stringify","fetch","then","res","parseInt","get","ok","json","resBody"],"sources":["/Users/hoangkimduc/remitano/remitano-frontend/src/hooks/useFetch.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\";\n\ndeclare var process: {\n  env: {\n    REACT_APP_REMITANO_BACKEND_URL: string;\n  };\n};\n\ntype useFetchProps = {\n  path: string;\n  method: \"POST\" | \"GET\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n  onSuccess?: (data: any) => any;\n};\n\nconst useFetch = ({ path, method, onSuccess }: useFetchProps) => {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [total, setTotal] = useState(0);\n\n  const fetchApi = useCallback(\n    (params: any = {}) => {\n      const url =\n        `${process.env.REACT_APP_REMITANO_BACKEND_URL}/${path}?` +\n        (method === \"GET\" ? new URLSearchParams(params) : \"\");\n\n      const common_params = {\n        method: method,\n        mode: \"cors\" as RequestMode,\n        credentials: \"include\" as RequestCredentials,\n        headers: { \"Content-Type\": \"application/json\" },\n      };\n\n      const fetch_params =\n        method === \"GET\"\n          ? common_params\n          : { ...common_params, body: JSON.stringify(params) };\n\n      fetch(url, fetch_params).then((res) => {\n        setTotal(parseInt(res.headers.get(\"Total\") || \"0\"));\n        if (res.ok) {\n          res.json().then((resBody) => {\n            onSuccess?.(resBody);\n            setError(resBody.error);\n            setData(resBody.data);\n            setIsLoading(false);\n          });\n        } else {\n          res.json().then((resBody) => {\n            setError(resBody.error);\n            setData(resBody.data);\n            setIsLoading(false);\n          });\n        }\n      });\n    },\n    [path]\n  );\n\n  return { data, isLoading, error, total, fetchApi };\n};\nexport default useFetch;\n"],"mappings":";AAAA,SAASA,WAAW,EAAsBC,QAAQ,QAAQ,OAAO;AAcjE,MAAMC,QAAQ,GAAGC,IAAA,IAAgD;EAAAC,EAAA;EAAA,IAA/C;IAAEC,IAAI;IAAEC,MAAM;IAAEC;EAAyB,CAAC,GAAAJ,IAAA;EAC1D,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMe,QAAQ,GAAGhB,WAAW,CAC1B,YAAsB;IAAA,IAArBiB,MAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACf,MAAMG,GAAG,GACN,GAAEC,OAAO,CAACC,GAAG,CAACC,8BAA+B,IAAGnB,IAAK,GAAE,IACvDC,MAAM,KAAK,KAAK,GAAG,IAAImB,eAAe,CAACR,MAAM,CAAC,GAAG,EAAE,CAAC;IAEvD,MAAMS,aAAa,GAAG;MACpBpB,MAAM,EAAEA,MAAM;MACdqB,IAAI,EAAE,MAAqB;MAC3BC,WAAW,EAAE,SAA+B;MAC5CC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC;IAED,MAAMC,YAAY,GAChBxB,MAAM,KAAK,KAAK,GACZoB,aAAa,GACb;MAAE,GAAGA,aAAa;MAAEK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChB,MAAM;IAAE,CAAC;IAExDiB,KAAK,CAACb,GAAG,EAAES,YAAY,CAAC,CAACK,IAAI,CAAEC,GAAG,IAAK;MACrCrB,QAAQ,CAACsB,QAAQ,CAACD,GAAG,CAACP,OAAO,CAACS,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;MACnD,IAAIF,GAAG,CAACG,EAAE,EAAE;QACVH,GAAG,CAACI,IAAI,EAAE,CAACL,IAAI,CAAEM,OAAO,IAAK;UAC3BlC,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAGkC,OAAO,CAAC;UACpB5B,QAAQ,CAAC4B,OAAO,CAAC7B,KAAK,CAAC;UACvBH,OAAO,CAACgC,OAAO,CAACjC,IAAI,CAAC;UACrBG,YAAY,CAAC,KAAK,CAAC;QACrB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLyB,GAAG,CAACI,IAAI,EAAE,CAACL,IAAI,CAAEM,OAAO,IAAK;UAC3B5B,QAAQ,CAAC4B,OAAO,CAAC7B,KAAK,CAAC;UACvBH,OAAO,CAACgC,OAAO,CAACjC,IAAI,CAAC;UACrBG,YAAY,CAAC,KAAK,CAAC;QACrB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,EACD,CAACN,IAAI,CAAC,CACP;EAED,OAAO;IAAEG,IAAI;IAAEE,SAAS;IAAEE,KAAK;IAAEE,KAAK;IAAEE;EAAS,CAAC;AACpD,CAAC;AAACZ,EAAA,CA9CIF,QAAQ;AA+Cd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}