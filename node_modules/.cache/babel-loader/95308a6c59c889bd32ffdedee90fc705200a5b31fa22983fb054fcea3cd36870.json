{"ast":null,"code":"var _s2 = $RefreshSig$();\nimport { useMemo } from \"react\";\nimport useFetch from \"../../../hooks/useFetch\";\nconst useLoadVideos = _ref => {\n  _s2();\n  var _s = $RefreshSig$();\n  let {\n    pageIndex\n  } = _ref;\n  const path = 'api/v1/videos';\n  const {\n    data,\n    isLoading,\n    error\n  } = _s(useMemo(_s(() => {\n    _s();\n    return useFetch({\n      path: path,\n      method: 'GET',\n      params: {\n        page: pageIndex\n      }\n    });\n  }, \"WM4OL7CqgzjgXHJL6SXd6kRTA8w=\", false, function () {\n    return [useFetch];\n  }), [pageIndex]), \"WM4OL7CqgzjgXHJL6SXd6kRTA8w=\", false, function () {\n    return [useFetch];\n  });\n  const parsedData = data == null ? [] : data.map(raw_video => ({\n    id: raw_video.id,\n    youtubeUrl: raw_video.youtube_url,\n    youtubeId: raw_video.youtube_id,\n    sharedBy: raw_video.shared_by,\n    upvoteCount: raw_video.upvote_count,\n    downvoteCount: raw_video.downvote_count,\n    description: raw_video.description,\n    title: raw_video.title,\n    createdAt: raw_video.created_at,\n    updatedAt: raw_video.updated_at\n  }));\n  return {\n    data: parsedData,\n    isLoading: isLoading,\n    error: error\n  };\n};\n_s2(useLoadVideos, \"Nfj5vsfpGL/U+OFnedkmXVYdB1U=\");\nexport default useLoadVideos;","map":{"version":3,"names":["useMemo","useFetch","useLoadVideos","_ref","_s2","_s","$RefreshSig$","pageIndex","path","data","isLoading","error","method","params","page","parsedData","map","raw_video","id","youtubeUrl","youtube_url","youtubeId","youtube_id","sharedBy","shared_by","upvoteCount","upvote_count","downvoteCount","downvote_count","description","title","createdAt","created_at","updatedAt","updated_at"],"sources":["/Users/hoangkimduc/remitano/remitano_frontend/src/features/videos/hooks/useLoadVideos.ts"],"sourcesContent":["import { useCallback, useMemo, useState } from \"react\";\nimport useFetch from \"../../../hooks/useFetch\";\nimport { VideoType } from \"../types\";\n\ntype useLoadVideosProps = {\n  pageIndex: number;\n}\n\nconst useLoadVideos = ({ pageIndex }: useLoadVideosProps) => {\n  const path = 'api/v1/videos'\n  const { data, isLoading, error } = useMemo(() =>\n    useFetch({ path: path, method: 'GET', params: { page: pageIndex }})\n  , [pageIndex])\n\n  const parsedData: VideoType[] = data == null ? [] : (data as any[]).map(raw_video =>\n    ({\n      id: raw_video.id,\n      youtubeUrl: raw_video.youtube_url,\n      youtubeId: raw_video.youtube_id,\n      sharedBy: raw_video.shared_by,\n      upvoteCount: raw_video.upvote_count,\n      downvoteCount: raw_video.downvote_count,\n      description: raw_video.description,\n      title: raw_video.title,\n      createdAt: raw_video.created_at,\n      updatedAt: raw_video.updated_at\n    }) as VideoType\n  )\n\n  return { data: parsedData, isLoading: isLoading, error: error }\n}\n\nexport default useLoadVideos\n"],"mappings":";AAAA,SAAsBA,OAAO,QAAkB,OAAO;AACtD,OAAOC,QAAQ,MAAM,yBAAyB;AAO9C,MAAMC,aAAa,GAAGC,IAAA,IAAuC;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAAA,IAAtC;IAAEC;EAA8B,CAAC,GAAAJ,IAAA;EACtD,MAAMK,IAAI,GAAG,eAAe;EAC5B,MAAM;IAAEC,IAAI;IAAEC,SAAS;IAAEC;EAAM,CAAC,GAAAN,EAAA,CAAGL,OAAO,CAAAK,EAAA,CAAC;IAAAA,EAAA;IAAA,OACzCJ,QAAQ,CAAC;MAAEO,IAAI,EAAEA,IAAI;MAAEI,MAAM,EAAE,KAAK;MAAEC,MAAM,EAAE;QAAEC,IAAI,EAAEP;MAAU;IAAC,CAAC,CAAC;EAAA;IAAA,QAAnEN,QAAQ;EAAA,IACR,CAACM,SAAS,CAAC,CAAC;IAAA,QADZN,QAAQ;EAAA,EACI;EAEd,MAAMc,UAAuB,GAAGN,IAAI,IAAI,IAAI,GAAG,EAAE,GAAIA,IAAI,CAAWO,GAAG,CAACC,SAAS,KAC9E;IACCC,EAAE,EAAED,SAAS,CAACC,EAAE;IAChBC,UAAU,EAAEF,SAAS,CAACG,WAAW;IACjCC,SAAS,EAAEJ,SAAS,CAACK,UAAU;IAC/BC,QAAQ,EAAEN,SAAS,CAACO,SAAS;IAC7BC,WAAW,EAAER,SAAS,CAACS,YAAY;IACnCC,aAAa,EAAEV,SAAS,CAACW,cAAc;IACvCC,WAAW,EAAEZ,SAAS,CAACY,WAAW;IAClCC,KAAK,EAAEb,SAAS,CAACa,KAAK;IACtBC,SAAS,EAAEd,SAAS,CAACe,UAAU;IAC/BC,SAAS,EAAEhB,SAAS,CAACiB;EACvB,CAAC,CAAc,CAChB;EAED,OAAO;IAAEzB,IAAI,EAAEM,UAAU;IAAEL,SAAS,EAAEA,SAAS;IAAEC,KAAK,EAAEA;EAAM,CAAC;AACjE,CAAC;AAAAP,GAAA,CAtBKF,aAAa;AAwBnB,eAAeA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}